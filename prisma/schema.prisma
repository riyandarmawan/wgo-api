generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  sentFriendRequests     FriendRequest[]   @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[]   @relation("ReceivedFriendRequests")
  roomParticipants       RoomParticipant[]
  messages               Message[]

  @@map("users")
}

model FriendRequest {
  id         String              @id @default(uuid()) @db.Uuid
  sender     User                @relation("SentFriendRequests", fields: [senderId], references: [id])
  senderId   String              @db.Uuid
  receiver   User                @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  receiverId String              @db.Uuid
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @default(now()) @updatedAt

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Room {
  id        String   @id @default(uuid()) @db.Uuid
  name      String? // null for 1-1 chats, has value for groups
  type      RoomType @default(PRIVATE)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  participants RoomParticipant[]
  messages     Message[]

  @@map("rooms")
}

model RoomParticipant {
  id        String   @id @default(uuid()) @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, roomId])
  @@map("room_participants")
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String   @db.Uuid
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("messages")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
}

enum RoomType {
  PRIVATE
  GROUP
}
